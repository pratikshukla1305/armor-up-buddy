import { v4 as uuidv4 } from 'uuid';
import { jsPDF } from 'jspdf';
import { supabase } from '@/integrations/supabase/client';

// Updated interface to match Supabase requirements
export interface ReportPdf {
  id?: string;
  report_id?: string;
  file_url: string; // Changed from optional to required
  file_name: string; // Changed from optional to required
  file_size?: number;
  created_at?: string;
  is_official?: boolean;
  metadata?: any;
}

// Function to generate a self-report PDF
export const generateSelfReportPDF = async (
  reportId: string,
  reportData: any,
  userId: string,
  includeAppLogo: boolean = true
): Promise<ReportPdf | null> => {
  try {
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.getWidth();
    const margin = 20;
    const textWidth = pageWidth - (margin * 2);
    
    // Set primary color to match navbar - stripe-blue-dark
    const primaryColor = '#0F172A'; // Navbar dark blue color
    
    // Add Shield logo if requested
    if (includeAppLogo) {
      try {
        // Create Shield logo and header
        doc.setFillColor(primaryColor);
        doc.rect(0, 0, pageWidth, 30, 'F');
        
        doc.setTextColor(255, 255, 255);
        doc.setFontSize(20);
        doc.text('Shield - Official Crime Report', 105, 15, { align: 'center' });
        
        // Add small shield icon in white if available
        const shieldLogo = new Image();
        shieldLogo.src = '/shield-logo-white.png';
        
        // You could add the logo here if you had it as a data URL
        // doc.addImage(logoDataUrl, 'PNG', 20, 8, 15, 15);
      } catch (logoErr) {
        console.error("Error adding Shield logo:", logoErr);
      }
    }
    
    // Report title
    doc.setTextColor(primaryColor);
    doc.setFontSize(18);
    doc.text('Crime Report', margin, includeAppLogo ? 45 : 20);
    
    // Report ID and date
    doc.setFontSize(10);
    doc.setTextColor(100, 100, 100);
    doc.text(`Report ID: ${reportId}`, margin, includeAppLogo ? 55 : 30);
    doc.text(`Date: ${new Date().toLocaleDateString()}`, margin, includeAppLogo ? 60 : 35);
    
    // Main content
    let yPos = includeAppLogo ? 70 : 45;
    
    // Report title/type
    doc.setFontSize(12);
    doc.setTextColor(primaryColor);
    doc.text('Report Type:', margin, yPos);
    
    doc.setTextColor(0, 0, 0);
    doc.text(reportData.title || 'Self Report', margin + 30, yPos);
    yPos += 10;
    
    // Location
    if (reportData.location) {
      doc.setTextColor(primaryColor);
      doc.text('Location:', margin, yPos);
      
      doc.setTextColor(0, 0, 0);
      doc.text(reportData.location, margin + 30, yPos);
      yPos += 10;
    }
    
    // Incident date
    if (reportData.incident_date) {
      doc.setTextColor(primaryColor);
      doc.text('Incident Date:', margin, yPos);
      
      doc.setTextColor(0, 0, 0);
      doc.text(new Date(reportData.incident_date).toLocaleDateString(), margin + 30, yPos);
      yPos += 10;
    }
    
    // Description section
    if (reportData.description) {
      yPos += 5;
      doc.setTextColor(primaryColor);
      doc.text('Description:', margin, yPos);
      yPos += 8;
      
      doc.setTextColor(0, 0, 0);
      const splitDescription = doc.splitTextToSize(reportData.description, textWidth);
      doc.text(splitDescription, margin, yPos);
      yPos += (splitDescription.length * 7) + 10;
    }
    
    // Official notice
    yPos = Math.max(yPos, 180); // Ensure there's room at the bottom
    
    doc.setDrawColor(200, 200, 200);
    doc.line(margin, yPos, pageWidth - margin, yPos);
    yPos += 10;
    
    doc.setFontSize(10);
    doc.setTextColor(100, 100, 100);
    
    if (includeAppLogo) {
      doc.text('This is an official report from the Shield system.', margin, yPos);
      yPos += 5;
      doc.text('Please retain for your records.', margin, yPos);
    } else {
      doc.text('This report was generated by Shield.', margin, yPos);
    }
    
    // Footer with report ID
    doc.setFontSize(8);
    doc.text(`Report ID: ${reportId} â€¢ Generated on ${new Date().toLocaleString()}`, pageWidth / 2, 285, { align: 'center' });

    // Convert to blob for upload
    const pdfBlob = doc.output('blob');
    
    // Create a unique filename
    const timestamp = Date.now();
    const fileName = includeAppLogo 
      ? `self_report_${timestamp}.pdf` 
      : `Shield-Crime-Report-${reportId}.pdf`;
      
    // Upload the PDF to Supabase
    const filePath = `report_pdfs/${reportId}/${uuidv4()}-${fileName}`;
    
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('evidences')
      .upload(filePath, pdfBlob, {
        contentType: 'application/pdf'
      });
    
    if (uploadError) {
      console.error('Error uploading PDF:', uploadError);
      return null;
    }
    
    // Get the public URL
    const { data: urlData } = supabase.storage
      .from('evidences')
      .getPublicUrl(filePath);
      
    if (!urlData?.publicUrl) {
      console.error('Failed to get public URL for PDF');
      return null;
    }
    
    // Store the reference in the database - make sure all required fields are set
    const reportPdfData: ReportPdf = {
      report_id: reportId,
      file_url: urlData.publicUrl, // This is now a required field
      file_name: fileName, // This is now a required field
      file_size: pdfBlob.size,
      is_official: includeAppLogo
    };
    
    const { data: pdfRecord, error: dbError } = await supabase
      .from('report_pdfs')
      .insert(reportPdfData)
      .select()
      .single();
    
    if (dbError) {
      console.error('Error storing PDF reference:', dbError);
      return null;
    }
    
    return pdfRecord;
  } catch (error) {
    console.error('Error generating PDF:', error);
    return null;
  }
};

// Function to get all PDFs for a report
export const getReportPDFs = async (reportId: string): Promise<ReportPdf[]> => {
  try {
    const { data, error } = await supabase
      .from('report_pdfs')
      .select('*')
      .eq('report_id', reportId)
      .order('created_at', { ascending: false });
    
    if (error) {
      console.error('Error fetching report PDFs:', error);
      return [];
    }
    
    return data || [];
  } catch (error) {
    console.error('Error in getReportPDFs:', error);
    return [];
  }
};

// Function to save a report PDF - ensure all required fields are set
export const saveReportPdf = async (
  reportId: string, 
  pdfBlob: Blob, 
  fileName: string, 
  isOfficial: boolean = false
): Promise<string | null> => {
  try {
    // Upload the PDF to Supabase
    const filePath = `report_pdfs/${reportId}/${uuidv4()}-${fileName}`;
    
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('evidences')
      .upload(filePath, pdfBlob, {
        contentType: 'application/pdf'
      });
    
    if (uploadError) {
      console.error('Error uploading PDF:', uploadError);
      return null;
    }
    
    // Get the public URL
    const { data: urlData } = supabase.storage
      .from('evidences')
      .getPublicUrl(filePath);
      
    if (!urlData?.publicUrl) {
      console.error('Failed to get public URL for PDF');
      return null;
    }
    
    // Store the reference in the database - ensure all required fields are explicitly set
    const reportPdfData: ReportPdf = {
      report_id: reportId,
      file_url: urlData.publicUrl, // This is now a required field
      file_name: fileName, // This is now a required field
      file_size: pdfBlob.size,
      is_official: isOfficial
    };
    
    const { data: pdfRecord, error: dbError } = await supabase
      .from('report_pdfs')
      .insert(reportPdfData)
      .select()
      .single();
    
    if (dbError) {
      console.error('Error storing PDF reference:', dbError);
      return null;
    }
    
    return urlData.publicUrl;
  } catch (error) {
    console.error('Error saving PDF:', error);
    return null;
  }
};

// Function to share a report via email
export const shareReportViaEmail = async (
  reportId: string,
  pdfUrl: string,
  recipientEmail: string,
  subject: string = 'Crime Incident Report',
  message: string = 'Please find attached the crime incident report for your review.'
): Promise<boolean> => {
  try {
    // In a real implementation, you would call a server endpoint
    // that sends an email with the PDF attached
    console.log('Sharing report via email:', {
      reportId,
      pdfUrl,
      recipientEmail,
      subject,
      message
    });
    
    // For now, we'll just simulate a successful email send
    // In a real app, this would call an API endpoint
    setTimeout(() => {
      console.log('Email sent successfully');
    }, 1000);
    
    return true;
  } catch (error) {
    console.error('Error sharing report via email:', error);
    return false;
  }
};

// Function to get officer report materials
export const getOfficerReportMaterials = async (reportId: string): Promise<any[]> => {
  try {
    // First check if there are any material records specifically for officers
    const { data: materials, error } = await supabase
      .from('officer_report_materials')
      .select('*')
      .eq('report_id', reportId);
    
    if (error) {
      console.error('Error fetching officer report materials:', error);
      
      // Fallback to report_pdfs if there's an error
      const { data: pdfs, error: pdfError } = await supabase
        .from('report_pdfs')
        .select('*')
        .eq('report_id', reportId);
      
      if (pdfError) {
        console.error('Error fetching report PDFs as fallback:', pdfError);
        return [];
      }
      
      // Transform PDFs to a format compatible with officer materials
      return pdfs.map(pdf => ({
        pdf_id: pdf.id,
        pdf_name: pdf.file_name,
        pdf_url: pdf.file_url,
        pdf_is_official: pdf.is_official,
        report_id: pdf.report_id
      }));
    }
    
    // If no officer materials found, fall back to report_pdfs
    if (!materials || materials.length === 0) {
      const { data: pdfs, error: pdfError } = await supabase
        .from('report_pdfs')
        .select('*')
        .eq('report_id', reportId);
      
      if (pdfError) {
        console.error('Error fetching report PDFs as fallback:', pdfError);
        return [];
      }
      
      // Transform PDFs to a format compatible with officer materials
      return pdfs.map(pdf => ({
        pdf_id: pdf.id,
        pdf_name: pdf.file_name,
        pdf_url: pdf.file_url,
        pdf_is_official: pdf.is_official,
        report_id: pdf.report_id
      }));
    }
    
    return materials;
  } catch (error) {
    console.error('Error in getOfficerReportMaterials:', error);
    return [];
  }
};

// Alias for getReportPDFs to match the imported name in GenerateDetailedReport.tsx
export const getReportPdfs = getReportPDFs;
